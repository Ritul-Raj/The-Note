{"ast":null,"code":"var _jsxFileName = \"D:\\\\reacttutorial\\\\awesomeapp\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// let count=1;                      /// in this way we cannot change the value of the count on clicking the button ..,We use usestate to solve the problem\n// function Incrementfunction(){\n// console.log(\"Clicked\");\n// count ++;\n// }\n\n// //usestate must be written in function \n\n// function App(){\n// // const state =useState();\n// const[count,setCount]=useState(0);\n\n// function Incrementfunction(){\n\n//     setCount (count + 1);\n//     }\n\n//     return (\n// <>\n// <h1>{count}</h1>\n\n// <button  onClick={Incrementfunction}>Click Me</button>\n\n// </>\n\n//     );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst currtime = new Date().toLocaleTimeString();\nfunction App() {\n  _s();\n  // const state =useState();\n\n  const [currtime, setCount] = useState(new Date().toLocaleTimeString());\n  function Incrementfunction() {\n    setCount(new Date().toLocaleTimeString());\n  }\n  setInterval(Incrementfunction, 1000); ////// IT IS USE for digital clock ,it call increment function after every 1000 miliseco\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: currtime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"OazozEXq2R4VnwqkdHnZsPr33vQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","currtime","Date","toLocaleTimeString","App","_s","setCount","Incrementfunction","setInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/reacttutorial/awesomeapp/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// let count=1;                      /// in this way we cannot change the value of the count on clicking the button ..,We use usestate to solve the problem\r\n// function Incrementfunction(){\r\n// console.log(\"Clicked\");\r\n// count ++;\r\n// }\r\n\r\n// //usestate must be written in function \r\n\r\n// function App(){\r\n// // const state =useState();\r\n// const[count,setCount]=useState(0);\r\n\r\n// function Incrementfunction(){\r\n\r\n//     setCount (count + 1);\r\n//     }\r\n    \r\n//     return (\r\n// <>\r\n// <h1>{count}</h1>\r\n\r\n// <button  onClick={Incrementfunction}>Click Me</button>\r\n\r\n// </>\r\n\r\n//     );\r\n// }\r\nconst currtime=new Date().toLocaleTimeString();\r\n\r\n\r\nfunction App(){\r\n   \r\n    // const state =useState();\r\n  \r\n    const[currtime,setCount]=useState(new Date().toLocaleTimeString());\r\n    \r\n    function Incrementfunction(){\r\n       \r\n        setCount (new Date().toLocaleTimeString());\r\n        }\r\n        setInterval(Incrementfunction,1000);  ////// IT IS USE for digital clock ,it call increment function after every 1000 miliseco\r\n        return (\r\n    <>\r\n    <h1>{currtime}</h1>\r\n    \r\n    {/* <button  onClick={Incrementfunction}>Get Time</button> */}\r\n    \r\n    </>\r\n    \r\n        );\r\n    }\r\n    \r\n    export default App;\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,QAAQ,GAAC,IAAIC,IAAI,EAAE,CAACC,kBAAkB,EAAE;AAG9C,SAASC,GAAGA,CAAA,EAAE;EAAAC,EAAA;EAEV;;EAEA,MAAK,CAACJ,QAAQ,EAACK,QAAQ,CAAC,GAACV,QAAQ,CAAC,IAAIM,IAAI,EAAE,CAACC,kBAAkB,EAAE,CAAC;EAElE,SAASI,iBAAiBA,CAAA,EAAE;IAExBD,QAAQ,CAAE,IAAIJ,IAAI,EAAE,CAACC,kBAAkB,EAAE,CAAC;EAC1C;EACAK,WAAW,CAACD,iBAAiB,EAAC,IAAI,CAAC,CAAC,CAAE;EACtC,oBACJT,OAAA,CAAAE,SAAA;IAAAS,QAAA,eACAX,OAAA;MAAAW,QAAA,EAAKR;IAAQ;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAM,iBAIhB;AAGH;AAACR,EAAA,CApBID,GAAG;AAAAU,EAAA,GAAHV,GAAG;AAsBR,eAAeA,GAAG;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}