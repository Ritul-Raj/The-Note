{"ast":null,"code":"import React, { useState } from \"react\";\n\n// let count=1;                      /// in this way we cannot change the value of the count on clicking the button ..,We use usestate to solve the problem\n// function Incrementfunction(){\n// console.log(\"Clicked\");\n// count ++;\n// }\n\n// //usestate must be written in function \n\n// function App(){\n// // const state =useState();\n// const[count,setCount]=useState(0);\n\n// function Incrementfunction(){\n\n//     setCount (count + 1);\n//     }\n\n//     return (\n// <>\n// <h1>{count}</h1>\n\n// <button  onClick={Incrementfunction}>Click Me</button>\n\n// </>\n\n//     );\n// }\n\n/////********************************************************************************************************************************************////\n\n// function App(){\n\n//     // const state =useState();\n\n//     const[currtime,setCount]=useState(new Date().toLocaleTimeString());\n\n//     function Incrementfunction(){\n\n//         setCount (new Date().toLocaleTimeString());\n//         }\n//         setInterval(Incrementfunction,1000);  ////// IT IS USE for digital clock ,it call increment function after every 1000 milisecond. \n//         return (\n//     <>\n//     <h1>{currtime}</h1>\n\n//     {/* <button  onClick={Incrementfunction}>Get Time</button> */}\n\n//     </>\n\n//         );\n//     }\n\n//     export default App;\n\n//////////**************************************************************************************************************************** */////////////\n// function App(){\n\n// const[bg,setData]=useState(\"red\");\n// const[name,setName]=useState(\"hiiüñêüñê\");\n\n// function changeBg(){\n// let cc=\"purple\";\n// setData(cc);\n// setName(\"ByeüéÖü§∂\");\n\n// }\n\n// function changedouble(){\n//     setData(\"yellow\");\n//     setName(\"goodüë±‚Äç‚ôÄÔ∏è\");\n// }\n\n// return(\n// <>\n// <div style={{background:bg}}>\n// <button onClick={changeBg}   onDoubleClick={changedouble}> {name}</button>\n// </div>\n// </>\n// );\n\n// };\n\n// export default App;\n\n///////////////////////////////////////****************************************************************************************** *//////////////////\n\n// function App(){\n// const[name,setName]=useState(\"\");\n// const[name2,set2Name]=useState(\"\");\n// let kk=\"\";\n// let kk2=\"\";\n// function ritul (event){\n// console.log(event.target.value);\n// // setName(event.target.value);\n// kk=event.target.value;                          ///////if we use button type (see niche wala code) submit then ,we not able to show the result we type ,because submit button store data in backend and refresh the page, so we have to use ,,,,,event.preventDefault();\n// }\n// function ritulraj (event){\n//     console.log(event.target.value);\n//     // setName(event.target.value);\n//     kk2=event.target.value;                        \n//     }\n\n// function ritulsubmit(){\n\n//     setName(kk);\n//     set2Name(kk2);\n// }\n//     return (\n// <>\n// <div>\n// <h1>Hello {name}  {name2}</h1>\n// <input type=\"text\" placeholder=\"Enter first name\"\n//     onChange={ritul}\n// />\n// <input type=\"text\" placeholder=\"Enter last name\"\n//     onChange={ritulraj}\n// />\n// <button   onClick={ritulsubmit}>Click Me üëç</button>\n// </div>\n// </>\n\n//     )\n// }\n// export default App;\n\n//////////////***********************************************************************************************************************///////////////////\n///// React Login Page (not adding css)\n//  function App(){\n//     const[fullName,setName]=useState({\n//      name1: \"\",\n//      name2: \"\",\n//      name3:\"\"\n\n//     });\n\n//     function ritul (event){\n//     console.log(event.target.value);\n//     console.log(event.target.name);\n//     const value=event.target.value;\n//     const nam=event.target.name;\n//     //  setName(event.target.value);\n//     // kk=event.target.value;  \n\n//  setName( function  preValue () {    // if we have more button then we have to write more code same as if ,else etc (efficient solution niche haii)\n//     console.log(preValue);      \n//     if(nam==\"name1\"){\n//         return {\n//             name1 :value,\n//             name2:preValue.name2,\n//             name3:preValue.name3,\n//         }\n//     }\n//     else if(nam==\"name2\"){\n//         return{\n//             name2 :value,\n//             name1:preValue.name1,\n//             name3:preValue.name3,\n//         }\n//     }\n\n//     else if(nam==\"name3\"){\n//         return{\n//             name3 :value,\n//             name1:preValue.name1,\n//             name2:preValue.name2,\n//         }\n//     }\n// })\n\n//  }                                                  \n\n//     function ritulsubmit(event){\n//      event.preventDefault();  ////  we add this to prevent the default behaviour of the submit button\n//     //  alert('Form Submitted');\n//         // setName(kk);\n\n//     }\n//         return (\n//     <>\n//     <form>\n//     <div>\n//     <h1>Hello {fullName.name1} {fullName.name2} {fullName.name3} </h1>\n//     <input type=\"text\" placeholder=\"Enter first name\"\n//         onChange={ritul} name=\"name1\"\n//         value={fullName.name1}\n//     />\n//     <input type=\"text\" placeholder=\"Enter last name\"\n//         onChange={ritul}  name=\"name2\" \n//         value={fullName.name2}\n//     />\n//       <input type=\"text\" placeholder=\"Enter 3last name\"\n//         onChange={ritul}  name=\"name3\" \n//         value={fullName.name3}\n//     />\n//     <button   onClick={ritulsubmit}>Click Me üëç</button>\n//     </div></form>\n//     </>\n\n//         )\n//     }\n//     export default App;","map":{"version":3,"names":["React","useState"],"sources":["D:/reacttutorial/awesomeapp/src/AppHOOKs.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// let count=1;                      /// in this way we cannot change the value of the count on clicking the button ..,We use usestate to solve the problem\r\n// function Incrementfunction(){\r\n// console.log(\"Clicked\");\r\n// count ++;\r\n// }\r\n\r\n// //usestate must be written in function \r\n\r\n// function App(){\r\n// // const state =useState();\r\n// const[count,setCount]=useState(0);\r\n\r\n// function Incrementfunction(){\r\n\r\n//     setCount (count + 1);\r\n//     }\r\n    \r\n//     return (\r\n// <>\r\n// <h1>{count}</h1>\r\n\r\n// <button  onClick={Incrementfunction}>Click Me</button>\r\n\r\n// </>\r\n\r\n//     );\r\n// }\r\n\r\n/////********************************************************************************************************************************************////\r\n\r\n// function App(){\r\n   \r\n//     // const state =useState();\r\n  \r\n//     const[currtime,setCount]=useState(new Date().toLocaleTimeString());\r\n    \r\n//     function Incrementfunction(){\r\n       \r\n//         setCount (new Date().toLocaleTimeString());\r\n//         }\r\n//         setInterval(Incrementfunction,1000);  ////// IT IS USE for digital clock ,it call increment function after every 1000 milisecond. \r\n//         return (\r\n//     <>\r\n//     <h1>{currtime}</h1>\r\n    \r\n//     {/* <button  onClick={Incrementfunction}>Get Time</button> */}\r\n    \r\n//     </>\r\n    \r\n//         );\r\n//     }\r\n    \r\n//     export default App;\r\n\r\n//////////**************************************************************************************************************************** */////////////\r\n// function App(){\r\n\r\n// const[bg,setData]=useState(\"red\");\r\n// const[name,setName]=useState(\"hiiüñêüñê\");\r\n\r\n// function changeBg(){\r\n// let cc=\"purple\";\r\n// setData(cc);\r\n// setName(\"ByeüéÖü§∂\");\r\n\r\n// }\r\n\r\n// function changedouble(){\r\n//     setData(\"yellow\");\r\n//     setName(\"goodüë±‚Äç‚ôÄÔ∏è\");\r\n// }\r\n\r\n// return(\r\n// <>\r\n// <div style={{background:bg}}>\r\n// <button onClick={changeBg}   onDoubleClick={changedouble}> {name}</button>\r\n// </div>\r\n// </>\r\n// );\r\n\r\n// };\r\n\r\n// export default App;\r\n\r\n///////////////////////////////////////****************************************************************************************** *//////////////////\r\n\r\n// function App(){\r\n// const[name,setName]=useState(\"\");\r\n// const[name2,set2Name]=useState(\"\");\r\n// let kk=\"\";\r\n// let kk2=\"\";\r\n// function ritul (event){\r\n// console.log(event.target.value);\r\n// // setName(event.target.value);\r\n// kk=event.target.value;                          ///////if we use button type (see niche wala code) submit then ,we not able to show the result we type ,because submit button store data in backend and refresh the page, so we have to use ,,,,,event.preventDefault();\r\n// }\r\n// function ritulraj (event){\r\n//     console.log(event.target.value);\r\n//     // setName(event.target.value);\r\n//     kk2=event.target.value;                        \r\n//     }\r\n    \r\n\r\n// function ritulsubmit(){\r\n\r\n//     setName(kk);\r\n//     set2Name(kk2);\r\n// }\r\n//     return (\r\n// <>\r\n// <div>\r\n// <h1>Hello {name}  {name2}</h1>\r\n// <input type=\"text\" placeholder=\"Enter first name\"\r\n//     onChange={ritul}\r\n// />\r\n// <input type=\"text\" placeholder=\"Enter last name\"\r\n//     onChange={ritulraj}\r\n// />\r\n// <button   onClick={ritulsubmit}>Click Me üëç</button>\r\n// </div>\r\n// </>\r\n\r\n//     )\r\n// }\r\n// export default App;\r\n\r\n//////////////***********************************************************************************************************************///////////////////\r\n///// React Login Page (not adding css)\r\n//  function App(){\r\n//     const[fullName,setName]=useState({\r\n//      name1: \"\",\r\n//      name2: \"\",\r\n//      name3:\"\"\r\n \r\n//     });\r\n \r\n\r\n//     function ritul (event){\r\n//     console.log(event.target.value);\r\n//     console.log(event.target.name);\r\n//     const value=event.target.value;\r\n//     const nam=event.target.name;\r\n//     //  setName(event.target.value);\r\n//     // kk=event.target.value;  \r\n    \r\n    \r\n//  setName( function  preValue () {    // if we have more button then we have to write more code same as if ,else etc (efficient solution niche haii)\r\n//     console.log(preValue);      \r\n//     if(nam==\"name1\"){\r\n//         return {\r\n//             name1 :value,\r\n//             name2:preValue.name2,\r\n//             name3:preValue.name3,\r\n//         }\r\n//     }\r\n//     else if(nam==\"name2\"){\r\n//         return{\r\n//             name2 :value,\r\n//             name1:preValue.name1,\r\n//             name3:preValue.name3,\r\n//         }\r\n//     }\r\n\r\n//     else if(nam==\"name3\"){\r\n//         return{\r\n//             name3 :value,\r\n//             name1:preValue.name1,\r\n//             name2:preValue.name2,\r\n//         }\r\n//     }\r\n// })\r\n\r\n\r\n\r\n\r\n//  }                                                  \r\n   \r\n        \r\n    \r\n//     function ritulsubmit(event){\r\n//      event.preventDefault();  ////  we add this to prevent the default behaviour of the submit button\r\n//     //  alert('Form Submitted');\r\n//         // setName(kk);\r\n       \r\n//     }\r\n//         return (\r\n//     <>\r\n//     <form>\r\n//     <div>\r\n//     <h1>Hello {fullName.name1} {fullName.name2} {fullName.name3} </h1>\r\n//     <input type=\"text\" placeholder=\"Enter first name\"\r\n//         onChange={ritul} name=\"name1\"\r\n//         value={fullName.name1}\r\n//     />\r\n//     <input type=\"text\" placeholder=\"Enter last name\"\r\n//         onChange={ritul}  name=\"name2\" \r\n//         value={fullName.name2}\r\n//     />\r\n//       <input type=\"text\" placeholder=\"Enter 3last name\"\r\n//         onChange={ritul}  name=\"name3\" \r\n//         value={fullName.name3}\r\n//     />\r\n//     <button   onClick={ritulsubmit}>Click Me üëç</button>\r\n//     </div></form>\r\n//     </>\r\n    \r\n//         )\r\n//     }\r\n//     export default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEv},"metadata":{},"sourceType":"module","externalDependencies":[]}