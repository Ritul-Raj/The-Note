{"ast":null,"code":"var _jsxFileName = \"D:\\\\reacttutorial\\\\awesomeapp\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// let count=1;                      /// in this way we cannot change the value of the count on clicking the button ..,We use usestate to solve the problem\n// function Incrementfunction(){\n// console.log(\"Clicked\");\n// count ++;\n// }\n\n// //usestate must be written in function \n\n// function App(){\n// // const state =useState();\n// const[count,setCount]=useState(0);\n\n// function Incrementfunction(){\n\n//     setCount (count + 1);\n//     }\n\n//     return (\n// <>\n// <h1>{count}</h1>\n\n// <button  onClick={Incrementfunction}>Click Me</button>\n\n// </>\n\n//     );\n// }\n\n/////********************************************************************************************************************************************////\n\n// function App(){\n\n//     // const state =useState();\n\n//     const[currtime,setCount]=useState(new Date().toLocaleTimeString());\n\n//     function Incrementfunction(){\n\n//         setCount (new Date().toLocaleTimeString());\n//         }\n//         setInterval(Incrementfunction,1000);  ////// IT IS USE for digital clock ,it call increment function after every 1000 milisecond. \n//         return (\n//     <>\n//     <h1>{currtime}</h1>\n\n//     {/* <button  onClick={Incrementfunction}>Get Time</button> */}\n\n//     </>\n\n//         );\n//     }\n\n//     export default App;\n\n//////////**************************************************************************************************************************** */////////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [bg, setData] = useState();\n  function changeBg() {\n    let cc;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: bg\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeBg,\n        children: \" hii\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"WB4rKS1nWBp7M1tFkxEUkKa9Las=\");\n_c = App;\n;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","bg","setData","changeBg","cc","children","style","background","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/reacttutorial/awesomeapp/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// let count=1;                      /// in this way we cannot change the value of the count on clicking the button ..,We use usestate to solve the problem\r\n// function Incrementfunction(){\r\n// console.log(\"Clicked\");\r\n// count ++;\r\n// }\r\n\r\n// //usestate must be written in function \r\n\r\n// function App(){\r\n// // const state =useState();\r\n// const[count,setCount]=useState(0);\r\n\r\n// function Incrementfunction(){\r\n\r\n//     setCount (count + 1);\r\n//     }\r\n    \r\n//     return (\r\n// <>\r\n// <h1>{count}</h1>\r\n\r\n// <button  onClick={Incrementfunction}>Click Me</button>\r\n\r\n// </>\r\n\r\n//     );\r\n// }\r\n\r\n/////********************************************************************************************************************************************////\r\n\r\n// function App(){\r\n   \r\n//     // const state =useState();\r\n  \r\n//     const[currtime,setCount]=useState(new Date().toLocaleTimeString());\r\n    \r\n//     function Incrementfunction(){\r\n       \r\n//         setCount (new Date().toLocaleTimeString());\r\n//         }\r\n//         setInterval(Incrementfunction,1000);  ////// IT IS USE for digital clock ,it call increment function after every 1000 milisecond. \r\n//         return (\r\n//     <>\r\n//     <h1>{currtime}</h1>\r\n    \r\n//     {/* <button  onClick={Incrementfunction}>Get Time</button> */}\r\n    \r\n//     </>\r\n    \r\n//         );\r\n//     }\r\n    \r\n//     export default App;\r\n\r\n//////////**************************************************************************************************************************** */////////////\r\nfunction App(){\r\n\r\nconst[bg,setData]=useState();\r\n  \r\n\r\nfunction changeBg(){\r\nlet cc\r\n\r\n}\r\n\r\nreturn(\r\n<>\r\n\r\n<div style={{background:bg}}>\r\n<button onClick={changeBg}> hii</button>\r\n</div>\r\n</>\r\n);\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,GAAGA,CAAA,EAAE;EAAAC,EAAA;EAEd,MAAK,CAACC,EAAE,EAACC,OAAO,CAAC,GAACR,QAAQ,EAAE;EAG5B,SAASS,QAAQA,CAAA,EAAE;IACnB,IAAIC,EAAE;EAEN;EAEA,oBACAR,OAAA,CAAAE,SAAA;IAAAO,QAAA,eAEAT,OAAA;MAAKU,KAAK,EAAE;QAACC,UAAU,EAACN;MAAE,CAAE;MAAAI,QAAA,eAC5BT,OAAA;QAAQY,OAAO,EAAEL,QAAS;QAAAE,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAS;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAClC,iBACH;AAGH;AAACZ,EAAA,CAnBQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAmBX;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}