{"ast":null,"code":"var _jsxFileName = \"D:\\\\reacttutorial\\\\awesomeapp\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// let count=1;                      /// in this way we cannot change the value of the count on clicking the button ..,We use usestate to solve the problem\n// function Incrementfunction(){\n// console.log(\"Clicked\");\n// count ++;\n// }\n\n// //usestate must be written in function \n\n// function App(){\n// // const state =useState();\n// const[count,setCount]=useState(0);\n\n// function Incrementfunction(){\n\n//     setCount (count + 1);\n//     }\n\n//     return (\n// <>\n// <h1>{count}</h1>\n\n// <button  onClick={Incrementfunction}>Click Me</button>\n\n// </>\n\n//     );\n// }\n\n/////********************************************************************************************************************************************////\n\n// function App(){\n\n//     // const state =useState();\n\n//     const[currtime,setCount]=useState(new Date().toLocaleTimeString());\n\n//     function Incrementfunction(){\n\n//         setCount (new Date().toLocaleTimeString());\n//         }\n//         setInterval(Incrementfunction,1000);  ////// IT IS USE for digital clock ,it call increment function after every 1000 milisecond. \n//         return (\n//     <>\n//     <h1>{currtime}</h1>\n\n//     {/* <button  onClick={Incrementfunction}>Get Time</button> */}\n\n//     </>\n\n//         );\n//     }\n\n//     export default App;\n\n//////////**************************************************************************************************************************** */////////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [bg, setData] = useState();\n  return /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 1\n  }, this);\n}\n_s(App, \"WB4rKS1nWBp7M1tFkxEUkKa9Las=\");\n_c = App;\n;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","bg","setData","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/reacttutorial/awesomeapp/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// let count=1;                      /// in this way we cannot change the value of the count on clicking the button ..,We use usestate to solve the problem\r\n// function Incrementfunction(){\r\n// console.log(\"Clicked\");\r\n// count ++;\r\n// }\r\n\r\n// //usestate must be written in function \r\n\r\n// function App(){\r\n// // const state =useState();\r\n// const[count,setCount]=useState(0);\r\n\r\n// function Incrementfunction(){\r\n\r\n//     setCount (count + 1);\r\n//     }\r\n    \r\n//     return (\r\n// <>\r\n// <h1>{count}</h1>\r\n\r\n// <button  onClick={Incrementfunction}>Click Me</button>\r\n\r\n// </>\r\n\r\n//     );\r\n// }\r\n\r\n/////********************************************************************************************************************************************////\r\n\r\n// function App(){\r\n   \r\n//     // const state =useState();\r\n  \r\n//     const[currtime,setCount]=useState(new Date().toLocaleTimeString());\r\n    \r\n//     function Incrementfunction(){\r\n       \r\n//         setCount (new Date().toLocaleTimeString());\r\n//         }\r\n//         setInterval(Incrementfunction,1000);  ////// IT IS USE for digital clock ,it call increment function after every 1000 milisecond. \r\n//         return (\r\n//     <>\r\n//     <h1>{currtime}</h1>\r\n    \r\n//     {/* <button  onClick={Incrementfunction}>Get Time</button> */}\r\n    \r\n//     </>\r\n    \r\n//         );\r\n//     }\r\n    \r\n//     export default App;\r\n\r\n//////////**************************************************************************************************************************** */////////////\r\nfunction App(){\r\n\r\nconst[bg,setData]=useState()\r\n\r\n\r\nreturn (\r\n\r\n\r\n<h1></h1>\r\n\r\n\r\n);\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAE;EAAAC,EAAA;EAEd,MAAK,CAACC,EAAE,EAACC,OAAO,CAAC,GAACN,QAAQ,EAAE;EAG5B,oBAGAE,OAAA;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAS;AAKT;AAACN,EAAA,CAbQD,GAAG;AAAAQ,EAAA,GAAHR,GAAG;AAaX;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}